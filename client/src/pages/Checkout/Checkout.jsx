import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import "./checkout_style.scss";
import { UserContext } from "../../context/UserContext";
import { useContext } from "react";
import { getOrderUser, statusAfterPayment } from "../../services/orderService";
import { CartContext } from "../../context/CartContext";

const Checkout = () => {
  const [selectedMethod, setSelectedMethod] = useState("zalo");
  const { cart, order } = useContext(CartContext);
  console.log("üöÄ ~ Checkout ~ cart:", cart);
  const user = useContext(UserContext);
  console.log("üöÄ ~ Checkout ~ user:", user.user);

  const navigate = useNavigate();
  const methods = [
    {
      id: "zalo",
      label: "Thanh to√°n online qua c·ªïng thanh to√°n ZaloPay",
      description:
        "Sau khi nh·∫•p v√†o 'Thanh to√°n ngay', b·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng ƒë·∫øn Thanh to√°n online qua c·ªïng thanh to√°n ZaloPay ƒë·ªÉ ho√†n t·∫•t vi·ªác mua h√†ng m·ªôt c√°ch an to√†n.",
    },
    {
      id: "cod",
      label: "Thanh to√°n khi nh·∫≠n h√†ng (COD)",
    },
    {
      id: "bank",
      label: "Ti·ªÅn g·ª≠i ng√¢n h√†ng",
    },
  ];
  const updateStatus = async (id) => {
    try {
      const res = await statusAfterPayment(id);
      console.log("üöÄ ~ updateStatus ~ res:", res);
      if (res.data.code === 201) {
      }
    } catch (error) {
      console.log("üöÄ ~ updateStatus ~ error:", error);
    }
  };

  const handlePayment = () => {
    updateStatus(order?.id);

    navigate("/checkout/success");
  };

  return (
    <div className="checkout-container">
      <div className="checkout-content">
        <div className="checkout-form">
          <h2>Li√™n h·ªá</h2>
          <input
            type="text"
            placeholder="Email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i di ƒë·ªông"
            value={user?.user?.email}
          />

          <h2>Giao h√†ng</h2>
          <select>
            <option>Vi·ªát Nam</option>
          </select>
          <div className="name-fields">
            <input
              className="last-name"
              type="text"
              placeholder="T√™n"
              value={user?.user?.username}
            />
            {/* <input className="first-name" type="text" placeholder="H·ªç" /> */}
          </div>
          <div className="address">
            <input type="text" placeholder="ƒê·ªãa ch·ªâ" />
          </div>
          <div className="city-fields">
            <input type="text" placeholder="Th√†nh ph·ªë" />
            <input type="text" placeholder="M√£ b∆∞u ch√≠nh (kh√¥ng b·∫Øt bu·ªôc)" />
          </div>
          <input type="text" placeholder="ƒêi·ªán tho·∫°i" />

          <div className="payment-methods">
            <h2>Ph∆∞∆°ng th·ª©c thanh to√°n</h2>
            <p className="security-note">
              To√†n b·ªô c√°c giao d·ªãch ƒë∆∞·ª£c b·∫£o m·∫≠t v√† m√£ h√≥a.
            </p>
            <div className="methods-list">
              {methods.map((method) => (
                <div
                  key={method.id}
                  className={`method-item ${
                    selectedMethod === method.id ? "selected" : ""
                  }`}
                  onClick={() => setSelectedMethod(method.id)}
                >
                  <div className="radio-btn">
                    <input
                      type="radio"
                      checked={selectedMethod === method.id}
                      onChange={() => setSelectedMethod(method.id)}
                    />
                  </div>
                  <div className="method-content">
                    <div className="method-label">{method.label}</div>
                    {/* {method.icons && (
                      <div className="icons">
                        {method.icons.map((icon) => (
                          <img key={icon} src={`/${icon}.svg`} alt={icon} />
                        ))}
                      </div>
                    )} */}
                    {selectedMethod === method.id && method.description && (
                      <div className="method-description">
                        {/* <img
                          className="browser-icon"
                          src="/browser.svg"
                          alt="browser"
                        /> */}
                        <p>{method.description}</p>
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>

          <button className="pay-button" onClick={handlePayment}>
            Thanh to√°n ngay
          </button>
        </div>

        <div className="checkout-summary">
          {cart?.map((item) => (
            <div className="summary-item" key={item.id}>
              <img src={item.image} alt={item.name} />
              <div>
                <p>
                  {item.name} (x{item.OrderDetail.quantity})
                </p>{" "}
                {/* Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng n·∫øu mu·ªën */}
              </div>
              <p className="price">
                {item.OrderDetail.price.toLocaleString("vi-VN")} ƒë
              </p>
            </div>
          ))}

          <input type="text" placeholder="M√£ gi·∫£m gi√° ho·∫∑c th·∫ª qu√† t·∫∑ng" />
          <button>√Åp d·ª•ng</button>
          <div className="summary">
            <div className="tong-phu">
              <p className="text1">T·ªïng ph·ª•:</p>{" "}
              <p>{order?.total?.toLocaleString("vi-VN")} ƒë</p>
            </div>
            <div className="van-chuyen">
              <p className="text2">V·∫≠n chuy·ªÉn:</p> <p>MI·ªÑN PH√ç</p>
            </div>
            <div className="tong">
              <h3 className="text3">T·ªïng:</h3>{" "}
              <h3>{order?.total?.toLocaleString("vi-VN")} ƒë</h3>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Checkout;
